# -*- coding: utf-8 -*-
"""loan prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uEgnjiNT9-5QMbI_Xb1RPBlaWMrcRL-n
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

data=pd.read_csv('train_u6lujuX_CVtuZ9i.csv')
test=pd.read_csv('test.csv')

data.head()

data.shape

data.info()

data.describe()

data.hist(bins=50,figsize=(12,6))

data.isnull().sum()

data.isnull().count()

data['Gender']=data['Gender'].fillna(data['Gender'].dropna().mode().values[0])

data['Married']=data['Married'].fillna(data['Married'].dropna().mode().values[0])

data['Dependents']=data['Dependents'].fillna(data['Dependents'].dropna().mode().values[0])

data['Self_Employed']=data['Self_Employed'].fillna(data['Self_Employed'].dropna().mode().values[0])

data['LoanAmount']=data['LoanAmount'].fillna(data['LoanAmount'].mean())

data['Loan_Amount_Term']=data['Loan_Amount_Term'].fillna(data['Loan_Amount_Term'].mean())
data['Credit_History']=data['Credit_History'].fillna(data['Credit_History'].mean())

data.isnull().sum()

plt.hist(data['Gender'])

plt.hist(data['Married'])

plt.hist(data['Dependents'])

plt.hist(data['Education'])

plt.hist(data['Self_Employed'])

plt.hist(data['Property_Area'])

plt.hist(data['Loan_Status'])

plt.hist(data['ApplicantIncome'])

plt.hist(data['CoapplicantIncome'])

plt.hist(data['LoanAmount'])

plt.hist(data['Loan_Amount_Term'])

plt.hist(data['Credit_History'])

plt.hist(data['Credit_History'])

data['ApplicantIncome_log']=np.log(data['ApplicantIncome'])
data['CoapplicantIncome_log']=np.log(data['CoapplicantIncome'])
data['LoanAmount_log']=np.log(data['LoanAmount'])
data['Loan_Amount_Term_log']=np.log(data['Loan_Amount_Term'])

data['Total_Income']=data['ApplicantIncome']+data['CoapplicantIncome']
data.head()

data['Total_Income_log']=np.log(data['Total_Income'])

data.head()

cols=["ApplicantIncome","CoapplicantIncome","LoanAmount","Loan_Amount_Term","Total_Income","Loan_ID","CoapplicantIncome_log"]
data.drop(columns=cols,axis=1,inplace=True)
data.head()

from sklearn.preprocessing import LabelEncoder
cols= ['Gender','Married','Education','Self_Employed','Dependents','Property_Area','Loan_Status']
le=LabelEncoder()
for col in cols:
  data[col]=le.fit_transform(data[col])

data.head()

corr=data.corr()
corr['Loan_Status'].sort_values(ascending=False)

data.info()

df=pd.read_csv('test.csv')

df.head()

df.info()

df.describe()

df.shape

df.isnull().sum()

df['Gender']=df['Gender'].fillna(df['Gender'].mode()[0])
df['Dependents']=df['Dependents'].fillna(df['Dependents'].mode()[0])
df['Self_Employed']=df['Self_Employed'].fillna(df['Self_Employed'].mode()[0])
df['LoanAmount']=df['LoanAmount'].fillna(df['LoanAmount'].mean())
df['Loan_Amount_Term']=df['Loan_Amount_Term'].fillna(df['Loan_Amount_Term'].mean())
df['Credit_History']=df['Credit_History'].fillna(df['Credit_History'].mean())

df['ApplicantIncome_log']=np.log(df['ApplicantIncome'])
df['CoapplicantIncome_log']=np.log(df['CoapplicantIncome'])
df['LoanAmount_log']=np.log(df['LoanAmount'])
df['Loan_Amount_Term_log']=np.log(df['Loan_Amount_Term'])

df['Total_Income']=df['ApplicantIncome']+df['CoapplicantIncome']
df['Total_Income_log']=np.log(df['Total_Income'])

df.head()

cols=['ApplicantIncome','CoapplicantIncome','LoanAmount','Loan_Amount_Term','Total_Income','CoapplicantIncome_log','Loan_ID']
df=df.drop(columns=cols,axis=1)

df.head()

df.info()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
cols=['Married','Dependents','Education','Self_Employed','Property_Area','Gender']
for col in cols:
  df[col]=le.fit_transform(df[col])

df

from sklearn.model_selection import train_test_split

X = data.drop('Loan_Status',axis=1)
Y = data['Loan_Status']

X_train,X_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,random_state=42)

from sklearn.linear_model import LogisticRegression 
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

model=LogisticRegression()
#model=DecisionTreeClassifier()
#model=RandomForestClassifier()
model.fit(X_train,y_train)

score=model.score(X_test,y_test)*100
print("accuracy is",score)

from sklearn.model_selection import cross_val_score
crosscore=cross_val_score(model,X,Y,cv=5)
print("cross validation score ",np.mean(score))

score=model.score(X_test,y_test)*100
print("score",score)

score=model.score(X_test,y_test)*100
print("score",score)

y_pred=model.predict(X_test)
y_pred=np.array(y_pred)
y_pred=y_pred.reshape(-1,1)
y_test=np.array(y_test)
y_test=y_test.reshape(-1,1)

from sklearn.metrics import mean_squared_error
score=mean_squared_error(y_test,y_pred)
print("score",score)

np.array(y_pred).reshape(-1)

np.array(y_test).reshape(-1)